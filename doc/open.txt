==============================================================================
Introduction                                                         *open.nvim*

System open current word from vim.
For example: open 'ofirgall/open.nvim' in github in your browser.

==============================================================================
Table of Contents                                       *open.table-of-contents*

Introduction ······················································· |open.nvim|
Open ···································································· |open|
The built in openers ···································· |open.default_openers|
GitHub shorthand opener. ································· |open.openers.github|
Open URLs (useful to strip quotes and such from URLs) ······· |open.openers.url|

==============================================================================
Open                                                                      *open*

M.setup({opts})                                                     *open.setup*

    Parameters: ~
        {opts}  (table)  user config

    Usage: ~
>lua
        -- Default config
        require('open').setup {
            config = {
                -- Override system opener, the defaults should work out of the box
                system_open = {
                    cmd = "",
                    args = {},
                },
                -- Options to pass to plenary.curl
                curl_opts = {
                    -- compressed = false -- Uncomment this line to disable curl compression
                },
            },
            -- List of disabled openers, 'github' for example see `:help open.default_openers`
            disabled_openers = {
            },
            -- fallback function if no opener succeeds
            fallback = function(text)
                system_open.open(text)
            end,
            -- Override `config` per opener
            openers_config = {
                -- Override `jira` browser for example
                ['jira'] = {
                    system_open = {
                        cmd = 'chromium-browser',
                    },
                },
            },
        }
<


M.open({text})                                                       *open.open*
    Process the text in the openers

    Parameters: ~
        {text}  (string)  text to process


M.open_cword()                                                 *open.open_cword*
    Alias for open.open(vim.fn.expand('<cWORD>'))

    Usage: ~
>lua
        vim.keymap.set('n', 'gx', require('open').open_cword)
<


Opener                                                             *open.Opener*

    Fields: ~
        {name}     (string)                                Name of the opener.
        {open_fn}  (fun(text:string,opts:table):string[])  Function to process text to uris. Returns the uri's to open or nil to do nothing (skips to the next opener).


M.register_opener({opener})                               *open.register_opener*
    Register an opener.


    Parameters: ~
        {opener}  (Opener)  @usage[[
                            M.register_opener({
                                name = 'Example Opener',
                                open_fn = function(text, opts)
                                    return { 'www.example.org' }
                                end
                            })
                            @usage]]


==============================================================================
The built in openers                                      *open.default_openers*

==============================================================================
GitHub shorthand opener.                                   *open.openers.github*

M.name                                                *open.openers.github.name*

    Type: ~
        (string)  The name of the opener: `github`


M.open_fn({text})                                  *open.openers.github.open_fn*
     Open GitHub repo shorthand in GitHub

    Parameters: ~
        {text}  (string)  text to look for {github_user}/{repo}

    Returns: ~
        (string[]|nil)  https://github.com/{github_user}/{repo}


==============================================================================
Open URLs (useful to strip quotes and such from URLs)         *open.openers.url*

M.name                                                   *open.openers.url.name*

    Type: ~
        (string)  The name of the opener: `uri`


M.open_fn({text})                                     *open.openers.url.open_fn*
     Open URLs

    Parameters: ~
        {text}  (string)  text to look for valid URL

    Returns: ~
        (string[]|nil)  the URL


vim:tw=78:ts=8:noet:ft=help:norl:
